var searchIndex = {};
searchIndex['radix_trie'] = {"items":[[0,"","radix_trie","A wonderful, fast, safe, generic radix trie implementation.",null,null],[11,"new","nibble_vec","Create an empty nibble vector.",0,{"inputs":[{"name":"nibblevec"}],"output":{"name":"nibblevec"}}],[11,"from_byte_vec","","Create a nibble vector from a vector of bytes.",0,{"inputs":[{"name":"nibblevec"},{"name":"vec"}],"output":{"name":"nibblevec"}}],[11,"len","","Get the number of elements stored in the vector.",0,{"inputs":[{"name":"nibblevec"}],"output":{"name":"usize"}}],[11,"get","","Fetch a single entry from the vector.",0,{"inputs":[{"name":"nibblevec"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"push","","Add a single nibble to the vector.",0,null],[11,"split","","Split the vector into two parts.",0,{"inputs":[{"name":"nibblevec"},{"name":"usize"}],"output":{"name":"nibblevec"}}],[11,"join","","Append another nibble vector whilst consuming this vector.",0,{"inputs":[{"name":"nibblevec"},{"name":"nibblevec"}],"output":{"name":"nibblevec"}}],[11,"clone","","",0,{"inputs":[{"name":"nibblevec"}],"output":{"name":"nibblevec"}}],[11,"eq","","",0,{"inputs":[{"name":"nibblevec"},{"name":"nibblevec"}],"output":{"name":"bool"}}],[11,"eq","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"nibblevec"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"NibbleVec","radix_trie","A data-structure for storing a sequence of 4-bit values.",null,null],[3,"Iter","","Iterator over the keys and values of a Trie.",null,null],[3,"Keys","","Iterator over the keys of a Trie.",null,null],[3,"Values","","Iterator over the values of a Trie.",null,null],[3,"Trie","","Data-structure for storing and querying string-like keys and associated values.",null,null],[11,"encode","collections::string","",1,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"new","radix_trie","",2,{"inputs":[{"name":"iter"},{"name":"trie"}],"output":{"name":"iter"}}],[11,"new","","",3,{"inputs":[{"name":"keys"},{"name":"iter"}],"output":{"name":"keys"}}],[11,"next","","",3,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"new","","",4,{"inputs":[{"name":"values"},{"name":"iter"}],"output":{"name":"values"}}],[11,"next","","",4,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[0,"traversal","","",null,null],[8,"Traversal","radix_trie::traversal","Trait capturing a traversal of a trie.",null,null],[16,"Key","","Key type to be threaded through by `run`, needn't be `K` (is often `&'a K`).",5,null],[16,"Value","","Value type to be threaded through by `run`, needn't be `V` (is often `()`).",5,null],[16,"Result","","Type returned by the entire traversal, for insert it's `Option<V>`.",5,null],[10,"default_result","","",5,{"inputs":[{"name":"traversal"}],"output":{"name":"result"}}],[11,"root_fn","","",5,{"inputs":[{"name":"traversal"},{"name":"trie"},{"name":"key"},{"name":"value"}],"output":{"name":"result"}}],[11,"no_child_fn","","",5,{"inputs":[{"name":"traversal"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"},{"name":"usize"}],"output":{"name":"result"}}],[11,"full_match_fn","","",5,{"inputs":[{"name":"traversal"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"}],"output":{"name":"result"}}],[11,"partial_match_fn","","",5,{"inputs":[{"name":"traversal"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"},{"name":"usize"}],"output":{"name":"result"}}],[11,"first_prefix_fn","","",5,{"inputs":[{"name":"traversal"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"}],"output":{"name":"result"}}],[11,"action_fn","","",5,{"inputs":[{"name":"traversal"},{"name":"trie"},{"name":"result"},{"name":"usize"}],"output":{"name":"result"}}],[11,"run","","Run the traversal, returning the result.",5,{"inputs":[{"name":"traversal"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"}],"output":{"name":"result"}}],[8,"RefTraversal","","Trait capturing a traversal of a trie.",null,null],[16,"Key","","Key type to be threaded through by `run`, needn't be `K` (is often `&'a K`).",6,null],[16,"Value","","Value type to be threaded through by `run`, needn't be `V` (is often `()`).",6,null],[16,"Result","","Type returned by the entire traversal, for insert it's `Option<V>`.",6,null],[10,"default_result","","",6,{"inputs":[{"name":"reftraversal"}],"output":{"name":"result"}}],[11,"root_fn","","",6,{"inputs":[{"name":"reftraversal"},{"name":"trie"},{"name":"key"},{"name":"value"}],"output":{"name":"result"}}],[11,"no_child_fn","","",6,{"inputs":[{"name":"reftraversal"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"},{"name":"usize"}],"output":{"name":"result"}}],[11,"full_match_fn","","",6,{"inputs":[{"name":"reftraversal"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"}],"output":{"name":"result"}}],[11,"partial_match_fn","","",6,{"inputs":[{"name":"reftraversal"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"},{"name":"usize"}],"output":{"name":"result"}}],[11,"first_prefix_fn","","",6,{"inputs":[{"name":"reftraversal"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"}],"output":{"name":"result"}}],[11,"action_fn","","",6,{"inputs":[{"name":"reftraversal"},{"name":"trie"},{"name":"result"},{"name":"usize"}],"output":{"name":"result"}}],[11,"run","","Run the traversal, returning the result.",6,{"inputs":[{"name":"reftraversal"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"}],"output":{"name":"result"}}],[8,"TraversalMut","","Trait capturing a traversal of a trie.",null,null],[16,"Key","","Key type to be threaded through by `run`, needn't be `K` (is often `&'a K`).",7,null],[16,"Value","","Value type to be threaded through by `run`, needn't be `V` (is often `()`).",7,null],[16,"Result","","Type returned by the entire traversal, for insert it's `Option<V>`.",7,null],[10,"default_result","","",7,{"inputs":[{"name":"traversalmut"}],"output":{"name":"result"}}],[11,"root_fn","","",7,{"inputs":[{"name":"traversalmut"},{"name":"trie"},{"name":"key"},{"name":"value"}],"output":{"name":"result"}}],[11,"no_child_fn","","",7,{"inputs":[{"name":"traversalmut"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"},{"name":"usize"}],"output":{"name":"result"}}],[11,"full_match_fn","","",7,{"inputs":[{"name":"traversalmut"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"}],"output":{"name":"result"}}],[11,"partial_match_fn","","",7,{"inputs":[{"name":"traversalmut"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"},{"name":"usize"}],"output":{"name":"result"}}],[11,"first_prefix_fn","","",7,{"inputs":[{"name":"traversalmut"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"}],"output":{"name":"result"}}],[11,"action_fn","","",7,{"inputs":[{"name":"traversalmut"},{"name":"trie"},{"name":"result"},{"name":"usize"}],"output":{"name":"result"}}],[11,"run","","Run the traversal, returning the result.",7,{"inputs":[{"name":"traversalmut"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"}],"output":{"name":"result"}}],[8,"RefTraversalMut","","Trait capturing a traversal of a trie.",null,null],[16,"Key","","Key type to be threaded through by `run`, needn't be `K` (is often `&'a K`).",8,null],[16,"Value","","Value type to be threaded through by `run`, needn't be `V` (is often `()`).",8,null],[16,"Result","","Type returned by the entire traversal, for insert it's `Option<V>`.",8,null],[10,"default_result","","",8,{"inputs":[{"name":"reftraversalmut"}],"output":{"name":"result"}}],[11,"root_fn","","",8,{"inputs":[{"name":"reftraversalmut"},{"name":"trie"},{"name":"key"},{"name":"value"}],"output":{"name":"result"}}],[11,"no_child_fn","","",8,{"inputs":[{"name":"reftraversalmut"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"},{"name":"usize"}],"output":{"name":"result"}}],[11,"full_match_fn","","",8,{"inputs":[{"name":"reftraversalmut"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"}],"output":{"name":"result"}}],[11,"partial_match_fn","","",8,{"inputs":[{"name":"reftraversalmut"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"},{"name":"usize"}],"output":{"name":"result"}}],[11,"first_prefix_fn","","",8,{"inputs":[{"name":"reftraversalmut"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"}],"output":{"name":"result"}}],[11,"action_fn","","",8,{"inputs":[{"name":"reftraversalmut"},{"name":"trie"},{"name":"result"},{"name":"usize"}],"output":{"name":"result"}}],[11,"run","","Run the traversal, returning the result.",8,{"inputs":[{"name":"reftraversalmut"},{"name":"trie"},{"name":"key"},{"name":"value"},{"name":"nibblevec"}],"output":{"name":"result"}}],[8,"TrieKey","radix_trie","Trait for types which can be used to key a Radix Trie.",null,null],[10,"encode","","Encode a value as a vector of bytes.",9,{"inputs":[{"name":"triekey"}],"output":{"name":"vec"}}],[11,"fmt","","",10,{"inputs":[{"name":"trie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create an empty Trie.",10,{"inputs":[{"name":"trie"}],"output":{"name":"trie"}}],[11,"len","","Fetch the number of key-value pairs stored in the Trie.",10,{"inputs":[{"name":"trie"}],"output":{"name":"usize"}}],[11,"is_empty","","Determine if the Trie contains 0 key-value pairs.",10,{"inputs":[{"name":"trie"}],"output":{"name":"bool"}}],[11,"is_leaf","","Determine if the trie is a leaf node (has no children).",10,{"inputs":[{"name":"trie"}],"output":{"name":"bool"}}],[11,"key","","Get the key stored at this node, if any.",10,{"inputs":[{"name":"trie"}],"output":{"name":"option"}}],[11,"value","","Get the value stored at this node, if any.",10,{"inputs":[{"name":"trie"}],"output":{"name":"option"}}],[11,"value_mut","","Get a mutable reference to the value stored at this node, if any.",10,{"inputs":[{"name":"trie"}],"output":{"name":"option"}}],[11,"get","","Fetch a reference to the given key's corresponding value, if any.",10,{"inputs":[{"name":"trie"},{"name":"k"}],"output":{"name":"option"}}],[11,"get_mut","","Fetch a mutable reference to the given key's corresponding value, if any.",10,{"inputs":[{"name":"trie"},{"name":"k"}],"output":{"name":"option"}}],[11,"get_node","","Fetch a reference to the given key's corresponding node, if any.",10,{"inputs":[{"name":"trie"},{"name":"k"}],"output":{"name":"option"}}],[11,"get_ancestor","","Fetch a reference to the closest ancestor node of the given key.",10,{"inputs":[{"name":"trie"},{"name":"k"}],"output":{"name":"option"}}],[11,"get_ancestor_value","","Fetch the closest ancestor *value* for a given key.",10,{"inputs":[{"name":"trie"},{"name":"k"}],"output":{"name":"option"}}],[11,"get_descendant","","Fetch the closest descendant for a given key.",10,{"inputs":[{"name":"trie"},{"name":"k"}],"output":{"name":"option"}}],[11,"insert","","Insert the given key-value pair, returning any previous value associated with the key.",10,{"inputs":[{"name":"trie"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Remove and return the value associated with the given key.",10,{"inputs":[{"name":"trie"},{"name":"k"}],"output":{"name":"option"}}],[11,"iter","","Return an iterator over the keys and values of the Trie.",10,{"inputs":[{"name":"trie"}],"output":{"name":"iter"}}],[11,"keys","","Return an iterator over the keys of the Trie.",10,{"inputs":[{"name":"trie"}],"output":{"name":"keys"}}],[11,"values","","Return an iterator over the values of the Trie.",10,{"inputs":[{"name":"trie"}],"output":{"name":"values"}}],[14,"id!","","Identity macro to allow expansion of the \"mutability\" token tree.",null,null]],"paths":[[3,"NibbleVec"],[3,"String"],[3,"Iter"],[3,"Keys"],[3,"Values"],[8,"Traversal"],[8,"RefTraversal"],[8,"TraversalMut"],[8,"RefTraversalMut"],[8,"TrieKey"],[3,"Trie"]]};
initSearch(searchIndex);
